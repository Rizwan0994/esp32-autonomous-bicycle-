<!DOCTYPE html>
<html>

<head>
    <title>Autonomous Bicycle Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        h1,
        h2 {
            color: #007bff;
            text-align: center;
        }

        .status-item,
        .sensor-item,
        .gps-item {
            margin-bottom: 10px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f9f9f9;
        }

        .status-item strong,
        .sensor-item strong,
        .gps-item strong {
            font-weight: bold;
            color: #555;
        }

        .controls,
        .navigation-controls,
        .maneuver-controls,
        .speed-controls,
        .pid-controls,
        .wifi-controls {
            margin-top: 20px;
            text-align: center;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }

        .controls button,
        .navigation-controls button,
        .maneuver-controls button {
            padding: 10px 20px;
            margin: 5px;
            border: none;
            border-radius: 4px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
            font-size: 16px;
        }

        .controls button:hover,
        .navigation-controls button:hover,
        .maneuver-controls button:hover {
            background-color: #0056b3;
        }

        #ignition-btn {
            background-color: #28a745;
        }

        #ignition-btn.off {
            background-color: #dc3545;
        }

        #ignition-btn:hover {
            background-color: #1e7e34;
        }

        #ignition-btn.off:hover {
            background-color: #c82333;
        }

        .navigation-controls button.stop {
            background-color: #dc3545;
        }

        .navigation-controls button.stop:hover {
            background-color: #c82333;
        }

        .pid-group {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            align-items: center;
            justify-content: center;
        }

        .pid-group label {
            width: 50px;
            font-weight: bold;
            text-align: right;
        }

        .pid-group input[type="number"] {
            flex-grow: 1;
            max-width: 150px;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .pid-controls button {
            padding: 8px 15px;
            background-color: #6c757d;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .pid-controls button:hover {
            background-color: #5a6268;
        }

        .rear-alert {
            margin-top: 15px;
            padding: 10px;
            border-radius: 4px;
            text-align: center;
            font-weight: bold;
        }

        .rear-alert.danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .rear-alert.warning {
            background-color: #fff3cd;
            color: #85640a;
            border: 1px solid #ffeeba;
        }

        .rear-alert.clear {
            background-color: #e6ffe9;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        #map {
            height: 300px;
            width: 100%;
            margin-top: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .wifi-controls input[type="text"],
        .wifi-controls input[type="password"] {
            padding: 8px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
            width: 200px;
        }

        .wifi-controls button {
            background-color: #17a2b8;
        }

        .wifi-controls button:hover {
            background-color: #138496;
        }
    </style>
    <link href="https://api.mapbox.com/mapbox-gl-js/v3.1.0/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/v3.1.0/mapbox-gl.js"></script>
</head>

<body>
    <div class="container">
        <h1>Autonomous Bicycle Dashboard</h1>
        <p>ESP32 Module Status: <span id="esp32-connection-status">Disconnected</span></p>

        <div class="status-item">
            <strong>Current Action:</strong> <span id="current-action">Idle</span>
        </div>
        <div class="status-item">
            <strong>Ignition:</strong> <span id="ignition-status">Off</span>
        </div>
        <div class="status-item">
            <strong>Gyroscope/Balance:</strong> <span id="gyro-status">Off</span>
        </div>
        <div class="status-item">
            <strong>Balance Angle:</strong> <span id="balance-angle">0.00</span> degrees
        </div>
        <div class="status-item">
            <strong>Battery 1 Voltage:</strong> <span id="battery-1-voltage">N/A</span> V
        </div>
        <div class="status-item">
            <strong>Battery 2 Voltage:</strong> <span id="battery-2-voltage">N/A</span> V
        </div>
        <div class="status-item">
            <strong>Active Battery:</strong> <span id="active-battery">N/A</span>
        </div>


        <div class="gps-data">
            <h2>GPS Data</h2>
            <div class="gps-item"><strong>Vehicle Latitude:</strong> <span id="gps-lat">N/A</span></div>
            <div class="gps-item"><strong>Vehicle Longitude:</strong> <span id="gps-lng">N/A</span></div>
            <div class="gps-item"><strong>User Latitude:</strong> <span id="user-lat">N/A</span></div>
            <div class="gps-item"><strong>User Longitude:</strong> <span id="user-lng">N/A</span></div>
        </div>

        <div id="map"></div>

        <div class="sensor-data">
            <h2>Proximity Sensors (LiDAR)</h2>
            <div class="sensor-item"><strong>Forward:</strong> <span id="sensor-forward">N/A</span> cm</div>
            <div class="sensor-item"><strong>Backward:</strong> <span id="sensor-backward">N/A</span> cm</div>
            <div class="sensor-item"><strong>Left:</strong> <span id="sensor-left">N/A</span> cm</div>
            <div class="sensor-item"><strong>Right:</strong> <span id="sensor-right">N/A</span> cm</div>
            <div class="sensor-item"><strong>Forward Left:</strong> <span id="sensor-forwardLeft">N/A</span> cm</div>
            <div class="sensor-item"><strong>Forward Right:</strong> <span id="sensor-forwardRight">N/A</span> cm</div>
        </div>

        <div class="rear-alert">
            <strong>Rear Obstacle:</strong> <span id="rear-alert-message">N/A</span> (<span
                id="rear-alert-level">none</span>)
        </div>

        <div class="wifi-controls">
            <h2>Wi-Fi Configuration</h2>
            <form action="/update-wifi" method="POST">
                <label for="ssid">SSID:</label>
                <input type="text" id="ssid" name="ssid" value="<%= wifiConfig.ssid %>" required>
                <label for="password">Password:</label>
                <input type="password" id="password" name="password" value="<%= wifiConfig.password %>" required>
                <button type="submit">Update Wi-Fi</button>
            </form>
        </div>

        <div class="controls">
            <h2>General Controls</h2>
            <button id="ignition-btn">Toggle Ignition</button>
            <button id="balance-on-btn">Enable Balance</button>
            <button id="regenerative-brake-btn">Toggle Regenerative Braking</button>
            <button id="emergency-stop-btn" class="stop">Emergency Stop</button>
        </div>

        <div class="navigation-controls">
            <h2>Navigation</h2>
            <button onclick="sendCommand('set_direction', 'forward')">Drive Forward</button>
            <button onclick="sendCommand('set_direction', 'reverse')">Drive Reverse</button>
            <button onclick="sendCommand('set_direction', 'left')">Turn Left</button>
            <button onclick="sendCommand('set_direction', 'right')">Turn Right</button>
            <button class="stop" onclick="sendCommand('set_direction', 'stop')">Stop</button>
        </div>

        <div class="maneuver-controls">
            <h2>Maneuvers</h2>
            <button onclick="sendCommand('set_direction', 'forward_left')">Forward Left</button>
            <button onclick="sendCommand('set_direction', 'forward_right')">Forward Right</button>
            <button onclick="sendCommand('set_direction', 'reverse_left')">Reverse Left</button>
            <button onclick="sendCommand('set_direction', 'reverse_right')">Reverse Right</button>
            <button onclick="requestPickup()">Request Pickup (User Location)</button>
            <div style="margin-top: 10px;">
                <strong>Set Pickup Location:</strong>
                <input type="number" id="pickup-lat" placeholder="Latitude">
                <input type="number" id="pickup-lng" placeholder="Longitude">
                <button onclick="sendPickupRequestWithLocation()">Set & Request</button>
            </div>
        </div>

        <div class="speed-controls">
            <h2>Speed Control</h2>
            <label>Speed:</label>
            <select id="speed-select" onchange="setSpeed(this.value)">
                <option value="1">Low</option>
                <option value="2">Medium</option>
                <option value="3">High</option>
            </select>
        </div>

        <div class="pid-controls">
            <h2>Gyro PID Control</h2>
            <div class="pid-group">
                <label>P:</label>
                <input type="number" id="gyro-p" value="2.0" step="0.1">
            </div>
            <div class="pid-group">
                <label>I:</label>
                <input type="number" id="gyro-i" value="5.0" step="0.1">
            </div>
            <div class="pid-group">
                <label>D:</label>
                <input type="number" id="gyro-d" value="1.0" step="0.1">
            </div>
            <button onclick="setGyroPID()">Update Gyro PID</button>

            <h2>Steering PID Control</h2>
            <div class="pid-group">
                <label>P:</label>
                <input type="number" id="steering-p" value="1.5" step="0.1">
            </div>
            <div class="pid-group">
                <label>I:</label>
                <input type="number" id="steering-i" value="0.2" step="0.1">
            </div>
            <div class="pid-group">
                <label>D:</label>
                <input type="number" id="steering-d" value="0.5" step="0.1">
            </div>
            <button onclick="setSteeringPID()">Update Steering PID</button>
        </div>
    </div>

    <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoiemVlZTk5IiwiYSI6ImNsd3Rqc2ZzNzAzeHYyb3IxMm9xanFrdGwifQ.rTUqcwbx5ehH3YvrizHfug';
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v12',
            center: [73.0479, 33.6844], // Default center
            zoom: 15
        });

        let vehicleMarker = null;
        let userMarker = null;

        // Connect to the WebSocket on the same host and port as the HTTP server
        var websocket = new WebSocket('wss://' + window.location.hostname + '/ws');


        websocket.onopen = function (event) {
            console.log('WebSocket connection opened');
        };

        websocket.onmessage = function (event) {
            var data = JSON.parse(event.data);
            console.log('Received from ESP32:', data); // Debugging
            // Update ESP32 module connection status indicator
            var esp32StatusElement = document.getElementById('esp32-connection-status');
            if (data.isServerConnected !== undefined) {
                if (data.isServerConnected) {
                    esp32StatusElement.innerText = 'Connected';
                    esp32StatusElement.style.color = 'green'; // Make the text green
                } else {
                    esp32StatusElement.innerText = 'Disconnected';
                    esp32StatusElement.style.color = 'red'; // Make the text red
                }
                console.log('Updated ESP32 connection status:', data.isServerConnected); // Add console log
            } else {
                // Optional: Handle case where status is not in the message
                esp32StatusElement.innerText = 'Status N/A';
                esp32StatusElement.style.color = 'gray';
                console.log('ESP32 connection status not provided in message.');
            }

            // Update UI elements based on received data
            document.getElementById('ignition-status').innerText = data.ignition;
            document.getElementById('ignition-btn').className = data.ignition === 'On' ? '' : 'off';
            document.getElementById('gyro-status').innerText = data.gyroscope;
            document.getElementById('balance-angle').innerText = parseFloat(data.balance).toFixed(2);
            document.getElementById('current-action').innerText = data.currentAction;

            document.getElementById('battery-1-voltage').innerText = parseFloat(data.battery_1_voltage).toFixed(2);
            document.getElementById('battery-2-voltage').innerText = parseFloat(data.battery_2_voltage).toFixed(2);
            document.getElementById('active-battery').innerText = data.active_battery;

            // GPS Data
            if (data.gps) {
                document.getElementById('gps-lat').innerText = parseFloat(data.gps.lat).toFixed(4);
                document.getElementById('gps-lng').innerText = parseFloat(data.gps.lng).toFixed(4);

                const vehicleLngLat = [parseFloat(data.gps.lng), parseFloat(data.gps.lat)];
                if (vehicleMarker) {
                    vehicleMarker.setLngLat(vehicleLngLat);
                } else {
                    vehicleMarker = new mapboxgl.Marker()
                        .setLngLat(vehicleLngLat)
                        .addTo(map);
                    vehicleMarker.setPopup(new mapboxgl.Popup({ offset: 25 }).setText('Vehicle')); // Add a popup with label
                }
                map.flyTo({ center: vehicleLngLat, duration: 1000 });
            }
            // User GPS Data (from stored userLocation)
    if (userLocation) { // Check if userLocation is stored
        document.getElementById('user-lat').innerText = parseFloat(userLocation.lat).toFixed(4);
        document.getElementById('user-lng').innerText = parseFloat(userLocation.lng).toFixed(4);

        const userLngLat = [parseFloat(userLocation.lng), parseFloat(userLocation.lat)];
        if (userMarker) {
            userMarker.setLngLat(userLngLat);
        } else {
            userMarker = new mapboxgl.Marker({ color: '#FF0000' }) // Red marker for user
                .setLngLat(userLngLat)
                .addTo(map);
            userMarker.setPopup(new mapboxgl.Popup({ offset: 25 }).setText('User')); // Add a popup with label
        }
    }
           


            // Sensor Data
            if (data.sensors) {
                document.getElementById('sensor-forward').innerText = parseFloat(data.sensors.forward).toFixed(1);
                document.getElementById('sensor-backward').innerText = parseFloat(data.sensors.backward).toFixed(1);
                document.getElementById('sensor-left').innerText = parseFloat(data.sensors.left).toFixed(1);
                document.getElementById('sensor-right').innerText = parseFloat(data.sensors.right).toFixed(1);
                document.getElementById('sensor-forwardLeft').innerText = parseFloat(data.sensors.forwardLeft).toFixed(1);
                document.getElementById('sensor-forwardRight').innerText = parseFloat(data.sensors.forwardRight).toFixed(1);
            }

            // Rear Alert
            var rearAlertDiv = document.getElementById('rear-alert-message');
            var rearAlertLevelSpan = document.getElementById('rear-alert-level');
            var rearAlertContainer = document.querySelector('.rear-alert');

            if (data.rearAlert) {
                rearAlertDiv.innerText = data.rearAlert.message;
                rearAlertLevelSpan.innerText = data.rearAlert.level;
                rearAlertContainer.className = 'rear-alert'; // Reset classes
                if (data.rearAlert.level !== 'none') {
                    rearAlertContainer.classList.add(data.rearAlert.level);
                }
            }
        };

        websocket.onclose = function (event) {
            console.log('WebSocket connection closed');
        };

        websocket.onerror = function (event) {
            console.error('WebSocket error:', event);
        };

        // --- Event Listeners for Controls ---
        document.getElementById('ignition-btn').onclick = function () {
            sendCommand('start_ignition');
        };

        document.getElementById('balance-on-btn').onclick = function () {
            sendCommand('balance_cycle');
        };

        document.getElementById('regenerative-brake-btn').onclick = function () {
            sendCommand('toggle_regenerative_braking');
        };

        document.getElementById('emergency-stop-btn').onclick = function () {
            sendCommand('emergency_stop');
            alert('Emergency Stop Activated!');
        };


        // --- Functions to Send Commands ---
        function sendCommand(command, value) {
            if (websocket.readyState === WebSocket.OPEN) {
                var message = { command: command };
                if (value !== undefined) {
                    message.value = value;
                }
                websocket.send(JSON.stringify(message));
                console.log('Sent command:', message); // Debugging
            } else {
                console.error('WebSocket is not open. Cannot send command.');
            }
        }

        function setSpeed(speedLevel) {
            sendCommand('set_speed', parseInt(speedLevel));
        }

        function setGyroPID() {
            var p = parseFloat(document.getElementById('gyro-p').value);
            var i = parseFloat(document.getElementById('gyro-i').value);
            var d = parseFloat(document.getElementById('gyro-d').value);
            if (!isNaN(p) && !isNaN(i) && !isNaN(d)) {
                sendCommand('set_gyro_pid', { p: p, i: i, d: d });
            } else {
                alert('Please enter valid numbers for Gyro PID values.');
            }
        }

        function setSteeringPID() {
            var p = parseFloat(document.getElementById('steering-p').value);
            var i = parseFloat(document.getElementById('steering-i').value);
            var d = parseFloat(document.getElementById('steering-d').value);
            if (!isNaN(p) && !isNaN(i) && !isNaN(d)) {
                sendCommand('set_steering_pid', { p: p, i: i, d: d });
            } else {
                alert('Please enter valid numbers for Steering PID values.');
            }
        }
        let userLocation = null; // Variable to store user's location

        function requestPickup() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function (position) {
                        const userLat = position.coords.latitude;
                        const userLng = position.coords.longitude;
                        console.log('User Location (from browser):', userLat, userLng);
                        userLocation = { lat: userLat, lng: userLng }; // Store user location
                        sendCommand('request_pickup', { userLocation: userLocation });
                        alert('User pickup location updated.');
                    },
                    function (error) {
                        alert('Error getting user location: ' + error.message + '. Please enter manually.');
                        // Still send command, but without location
                        sendCommand('request_pickup');
                    }
                );
            } else {
                alert('Geolocation is not supported by your browser. Please enter pickup location manually.');
                sendCommand('request_pickup'); // Send command without location if browser doesn't support
            }
        }


        function sendPickupRequestWithLocation() {
            var lat = parseFloat(document.getElementById('pickup-lat').value);
            var lng = parseFloat(document.getElementById('pickup-lng').value);
            if (!isNaN(lat) && !isNaN(lng)) {
                sendCommand('request_pickup', { userLocation: { lat: lat, lng: lng } });
            } else {
                alert('Please enter valid latitude and longitude for pickup location.');
            }
        }
    </script>
</body>

</html>